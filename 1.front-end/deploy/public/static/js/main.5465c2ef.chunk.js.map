{"version":3,"sources":["components/header.jsx","App.js","redux/actions/bayaractions.jsx","serviceWorker.js","redux/reducers/bayarreducer.jsx","redux/reducers/index.js","index.js"],"names":["Header","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggle","bind","assertThisInitialized","state","isOpen","setState","react_default","a","createElement","Navbar","color","light","expand","NavbarBrand","href","NavbarToggler","onClick","Collapse","navbar","Nav","className","NavItem","NavLink","parkir","bayar","React","Component","connect","pay","App","selecteditems","ride","BtnBayar","jam","refs","value","Pay","Jam","printData","ref","type","style","textAlign","onBtnMobil","onBtnMotor","header","payload","b","Boolean","window","location","hostname","match","INITIAL_STATE","combineReducers","arguments","length","undefined","action","objectSpread","Bebas","createStore","Reducer","ReactDOM","render","es","store","react_router_dom","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5465c2ef.chunk.js","sourcesContent":["import React from 'react';\nimport {\n  Collapse,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink,\n  } from 'reactstrap';\nimport {connect} from 'react-redux'\nclass Header extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.toggle = this.toggle.bind(this);\n    this.state = {\n      isOpen: false\n    };\n  }\n  toggle() {\n    this.setState({\n      isOpen: !this.state.isOpen\n    });\n  }\n  render() {\n    return (\n      <div>\n        <Navbar color=\"light\" light expand=\"md\">\n          <NavbarBrand href=\"/\"><h2>Aplikasi Parkir</h2></NavbarBrand>\n          <NavbarToggler onClick={this.toggle} />\n          <Collapse isOpen={this.state.isOpen} navbar>\n            <Nav className=\"ml-auto\" navbar>\n              <NavItem>\n                <NavLink>{this.props.parkir} Jam</NavLink>\n                <NavLink>Bayar:</NavLink>\n                <NavLink><h3>Rp.{this.props.bayar},00</h3></NavLink>\n              </NavItem>\n            </Nav>\n          </Collapse>\n        </Navbar>\n      </div>\n    );\n  }\n}\nconst mapStateToProps=(state)=>{\n    return{\n        bayar :state.parkir.pay,\n        parkir: state.parkir.parkir\n    }\n    \n}\nexport default connect(mapStateToProps)(Header);","import React from 'react';\nimport './App.css';\nimport Header from './components/header'\nimport {connect} from 'react-redux'\nimport {Pay,Jam} from './../src/redux/actions/bayaractions'\n\nclass App extends React.Component{\n  state={\n    selecteditems:0,\n    bayar:0,\n    parkir:0,\n    ride:''\n  }\n  BtnBayar=(a)=>{\n    var jam=this.refs.parkir.value\n    var bayar=0\n    if(a==='mobil'){\n      bayar=jam*2000\n    }else{\n      bayar=jam*1000\n    }\n    this.props.Pay(bayar)\n    this.props.Jam(jam)\n    this.setState({bayar:bayar})\n    this.setState({parkir:jam })\n    this.refs.parkir.value=''\n\n  }\n  printData=()=>{\n    if(this.state.selecteditems===0){\n      return(\n        <p></p>\n      )\n    }else if(this.state.selecteditems===1){\n      return(\n        <div className='font-weight-bolder'>\n          <input ref='parkir' className='mr-5' type='number'/>\n          Jam\n          <br></br>\n          <br></br>\n          <br></br>\n          <br></br>\n          <br></br>\n          <div className='mr-5'>\n            <span style={{color:'red',textAlign:\"left\"}}>Total bayar </span>\n             Rp.{this.props.bayar},00\n          </div>\n          <input type='button' className='btn btn-primary mr-5 mt-5' value='Bayar' onClick={()=>this.BtnBayar('mobil')}/>\n          <div>{this.state.parkir} Jam</div>\n          <br></br>\n          <br></br>\n          <br></br>\n          <br></br>\n          Catatan= 2000/Jam\n        </div>\n      )\n    }else{\n      return(\n        <div className='font-weight-bolder'>\n          <input ref='parkir' className='mr-5' type='number'/>\n          Jam\n          <br></br>\n          <br></br>\n          <br></br>\n          <br></br>\n          <br></br>\n          <div className='mr-5' >\n            <span style={{color:'blue',textAlign:\"left\"}}>Total bayar </span>\n             Rp.{this.props.bayar},00\n          </div>\n          <input type='button' className='btn btn-primary mr-5 mt-5' value='Bayar' onClick={()=>this.BtnBayar('motor')}/>\n          <div>{this.state.parkir} Jam</div>\n          <br></br>\n          <br></br>\n          <br></br>\n          <br></br>\n          Catatan= 1000/Jam\n        </div>\n      )\n    }\n  }\n  onBtnMobil=()=>{\n    this.setState({selecteditems:1})\n    this.setState({ride:'Mobil'})\n    this.setState({parkir:0})\n    this.props.Pay(0)\n    this.props.Jam(0)\n  }\n  onBtnMotor=()=>{\n    this.setState({selecteditems:2})\n    this.setState({ ride: 'Motor' })\n    this.setState({parkir:0})\n    this.props.Pay(0)\n    this.props.Jam(0)\n  }\n  render(){\n    return (\n      <div>\n        <Header/>\n        <center>\n          <h1>Aplikasi Parkir {this.state.ride} </h1>\n          <input type='button' className='btn btn-outline-primary mr-5' value='MOBIL' onClick={this.onBtnMobil}/>\n          <input type='button' className='btn btn-outline-primary ml-5' value='MOTOR' onClick={this.onBtnMotor}/>\n          <br/>\n          <br/>\n          <br/>\n          <br/>\n          {this.printData()}          \n        </center>\n      </div>\n    );\n  }\n}\nconst mapStateToProps=(state)=>{\n  return{\n      bayar :state.parkir.pay,\n      parkir: state.parkir.jam\n  }\n}\nexport default connect(mapStateToProps,{Pay,Jam}) (App);\n","export const Pay=(a)=>{\n    return{\n        type:'BAYAR',\n        payload:a,\n    }\n}\nexport const Jam = (b) => {\n    return {\n        type: 'PARKIR',\n        parkir: b,\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const INITIAL_STATE={\n    pay:0,\n    parkir:0\n}\nexport default(state=INITIAL_STATE,action)=>{\n    switch (action.type){\n        case 'BAYAR':\n            return{...state,pay:action.payload}\n        case 'PARKIR':\n            return { ...state, parkir: action.parkir }\n        default:\n            return state\n    }\n}","import BayarReducer from './bayarreducer'\nimport {combineReducers} from 'redux'\nexport default combineReducers({\n    parkir:BayarReducer\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from 'react-router-dom'\nimport Reducer from './redux/reducers'//langsung ke index.js\nimport {createStore} from 'redux'\nimport {Provider} from 'react-redux'\n\nconst Bebas= createStore(Reducer)\nReactDOM.render(\n    <Provider store={Bebas}>\n        <BrowserRouter>\n            <App />\n        </BrowserRouter>\n    </Provider>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}